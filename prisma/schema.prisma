// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String         @unique
  password       String
  role           Role           @default(CLIENT)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  stories        Story[]
  articles       Article[]
  teams          Team[]
  comments       Comment[]
  inquiries      Inquiry[]
  messages       Message[]
  consultations  Consultation[]
}

enum Role {
  ADMIN
  CLIENT
}

model Story {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  image       String
  category    StoryCategory
  slug        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  author      User          @relation(fields: [authorId], references: [id])
  authorId    String        @db.ObjectId
  comments    Comment[]
}

enum StoryCategory {
  OPERATIONAL_ASSESSMENT
  OPERATIONS
  PROCORE
  SOFTWARE_ERP
  MARKETING
  BONUS_PROGRAMS
}

model Article {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  image       String?
  slug        String
  category    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String    @db.ObjectId
  comments    Comment[]
}

model Team {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  title       String
  description String
  image       String?
  linkedin    String?
  email       String?
  slug        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String   @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  story     Story?   @relation(fields: [storyId], references: [id])
  storyId   String?  @db.ObjectId
  article   Article? @relation(fields: [articleId], references: [id])
  articleId String?  @db.ObjectId
}

model Inquiry {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  subject   String
  message   String
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String   @db.ObjectId
}

model Consultation {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  subject     String
  description String
  date        DateTime
  status      ConsultationStatus @default(REQUESTED)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  client      User             @relation(fields: [clientId], references: [id])
  clientId    String           @db.ObjectId
}

enum Status {
  PENDING
  IN_PROGRESS
  RESOLVED
}

enum ConsultationStatus {
  REQUESTED
  CONFIRMED
  COMPLETED
  CANCELLED
}

model Contact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  lastName  String
  email     String
  phone     String
  company   String
  website   String?
  city      String
  state     String
  message   String
  status    ContactStatus @default(NEW)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ContactStatus {
  NEW
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

